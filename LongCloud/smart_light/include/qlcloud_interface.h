#ifndef __QLCLOUD_INTERFACE_H__
#define __QLCLOUD_INTERFACE_H__

/** 返回值 **/
#define ACK_OK	0
#define ACK_ERR	-1

/*****************************************************************************
数据点ID，由云平台生成，请将对应ID设置成宏定义，方便使用
*****************************************************************************/
#define DP_ID_DP_SWITCH     1
#define DP_ID_BRIGHTNESS    2
#define DP_ID_ONOFF_OWNER   3
#define	DP_ID_COLOR			4
#define DP_ID_COLOR_TEMP	5

#define MAX_MCUFW_BUFF_SIZE  2048

typedef unsigned char       qly_u8;
typedef signed char         qly_s8;
typedef unsigned short      qly_u16;
typedef signed short        qly_s16;
typedef unsigned int        qly_u32;
typedef signed int          qly_s32;
typedef unsigned long long  qly_u64;
typedef signed long long    qly_s64;
typedef float               qly_f32;
typedef double              qly_f64;

typedef enum DP_TYPE {
	DP_TYPE_INT,
	DP_TYPE_BOOL,
    DP_TYPE_ENUM,
    DP_TYPE_STRING,
    DP_TYPE_FLOAT,
    DP_TYPE_FAULT,
    DP_TYPE_BIN
}DP_TYPE_t;

typedef enum DEV_STATUS{
    DEV_STA_CONNECTED_CLOUD   = 0,
    DEV_STA_DISCONN_CLOUD     = 1,
    DEV_STA_AUTH_LIMIT        = 11,
    DEV_STA_MAC_BIND_OTHER_ID = 12
}DEV_STATUS_T;


//  第一部分 [系统函数]  /////////////////////////////////////////////////////

/*****************************************************************************
函数名称 : qlcloud_initialization
功能描述 : 初始化设备与云端交互的上下文环境，sdk与云端会建立长连接
传入参数 : product_id   : 平台生成，4字节的无符号整型数字，全网唯一产品ID
           product_key  : 云平台生成，16字节的十六进制编码，全网唯一产品秘钥
           mcu_version  : mcu固件版本，"xx.xx"，0≤x≤9
           recvbuf_size : 接收数据buffer大小，范围1024-4096，默认1024
           sendbuf_size : 发送数据buffer大小，范围1024-4096，默认1024
           encrypt_type   : 0 : 通过AES加密传输
                            1 : 通过SSL加密传输
传出参数 : 无
返回参数 :  0 : 初始化成功
           -1 : 初始化失败
*****************************************************************************/
qly_s32 qlcloud_initialization( qly_u32 product_id,
                                const qly_u8  product_key[16],
                                const qly_u8  mcu_version[5],
                                qly_s32  recvbuf_size,
                                qly_s32  sendbuf_size,
                                qly_u8  encrypt_type );
/*****************************************************************************
函数名称 : qlcloud_status_cb
功能描述 : 当设备连接状态发生改变时，sdk自动调用此函数
传入参数 : 无
传出参数 : dev_status : DEV_STA_CONNECTED_CLOUD   : 连接云端成功
                        DEV_STA_DISCONN_CLOUD     : 网络异常连接断开
                        DEV_STA_AUTH_LIMIT        : 设备授权数达上限，无法通过云端认证
                        DEV_STA_MAC_BIND_OTHER_ID : 设备mac地址已绑定其他产品，无法通过云端认证
           timestamp  : 状态改变的时间点
返回参数 : 无
*****************************************************************************/
void qlcloud_status_cb( DEV_STATUS_T dev_status, qly_u32 timestamp );
/*****************************************************************************
函数名称 : qlcloud_get_onlinetime
功能描述 : 获取网络时间
传入参数 : 无
传出参数 : 无
返回参数 : 0  : 时间无效
           >0 : 实时网络时间戳
*****************************************************************************/
qly_u32 qlcloud_get_onlinetime( void );

//  第一部分结束  ////////////////////////////////////////////////////////////


/*##########################################################################*/


//  第二部分 [传输数据]  /////////////////////////////////////////////////////

/*****************************************************************************
函数名称 : dp_up_add_int
功能描述 : 添加整型数据点到发送队列
传入参数 : dpid  : 范围1-200，请与云端创建的数据点对应
           value : 数据点对应的整数值
传出参数 : 无
返回参数 :  0 : 添加成功
           -1 : 添加失败
*****************************************************************************/
int dp_up_add_int ( qly_u8 dpid, qly_u32 value );
/*****************************************************************************
函数名称 : dp_up_add_bool
功能描述 : 添加布尔数据点到发送队列
传入参数 : dpid  : 范围1-200，请与云端创建的数据点对应
           value : 范围0-1，数据点对应的布尔数值
传出参数 : 无
返回参数 :  0 : 添加成功
           -1 : 添加失败
*****************************************************************************/
int dp_up_add_bool ( qly_u8 dpid, qly_u8 value );
/*****************************************************************************
函数名称 : dp_up_add_enum
功能描述 : 添加枚举型数据点到发送队列
传入参数 : dpid  : 范围1-200，请与云端创建的数据点对应
           value : 范围0-255，数据点对应的枚举数值
传出参数 : 无
返回参数 :  0 : 添加成功
           -1 : 添加失败
*****************************************************************************/
int dp_up_add_enum ( qly_u8 dpid, qly_u8 value );
/*****************************************************************************
函数名称 : dp_up_add_float
功能描述 : 添加浮点型数据点到发送队列
传入参数 : dpid  : 范围1-200，请与云端创建的数据点对应
           value : 数据点对应的浮点数值，32位浮点数
传出参数 : 无
返回参数 :  0 : 添加成功
           -1 : 添加失败
*****************************************************************************/
int dp_up_add_float ( qly_u8 dpid, qly_f32 value );
/*****************************************************************************
函数名称 : dp_up_add_string
功能描述 : 添加字符串数据点到发送队列
传入参数 : dpid    : 范围1-200，请与云端创建的数据点对应
           str     : 数据点对应的字符串数据
           str_len : 字符串的长度
传出参数 : 无
返回参数 :  0 : 添加成功
           -1 : 添加失败
*****************************************************************************/
int dp_up_add_string ( qly_u8 dpid, const qly_u8*  str, qly_u32 str_len );
/*****************************************************************************
函数名称 : dp_up_add_fault
功能描述 : 添加故障数据点到发送队列
传入参数 : dpid      : 范围1-200，请与云端创建的数据点对应
           fault     : 数据点对应的故障字符串数据
           fault_len : 故障字符串的长度
传出参数 : 无
返回参数 :  0 : 添加成功
           -1 : 添加失败
*****************************************************************************/
int  dp_up_add_fault ( qly_u8 dpid, const qly_u8* fault, qly_u32 fault_len );
/*****************************************************************************
函数名称 : dp_up_add_fault
功能描述 : 添加故障数据点到发送队列
传入参数 : dpid    : 范围1-200，请与云端创建的数据点对应
           bin     : 数据点对应的二进制数据
           bin_len : 二进制数据的长度
传出参数 : 无
返回参数 :  0 : 添加成功
           -1 : 添加失败
*****************************************************************************/
int  dp_up_add_binary( qly_u8 dpid, const qly_u8* bin, qly_u32 bin_len );
/*****************************************************************************
函数名称 : qlcloud_upload_dps
功能描述 : 上传一条数据，目前一条数据支持同时上传15个数据点
传入参数 : 无
传出参数 : data_seq : 本条数据的序列号
返回参数 : 无
*****************************************************************************/
qly_s32 qlcloud_upload_dps ( qly_u32* data_seq );
/*****************************************************************************
函数名称 : qlcloud_upload_dps_cb
功能描述 : 上传数据成功后，sdk自动调用下面这个回调函数
传入参数 : 无
传出参数 : data_seq : 某条数据的序列号
返回参数 : 无
*****************************************************************************/
void qlcloud_upload_dps_cb ( qly_u32 data_seq );
/*****************************************************************************
结构名称 : dp_down_handle_t类型函数指针
功能描述 : 处理下发数据点函数类型
传入参数 : in_data : 收到云端下发的数据
           in_len  : 数据长度
传出参数 : 无
返回参数 : 无
*****************************************************************************/
typedef void ( *dp_down_handle_t ) ( qly_u8* in_data, qly_u32 in_len );

/*****************************************************************************
结构名称 : struct qlcloud_download_dps
功能描述 : 下发数据点结构体
参    数 : dpid           : 范围1-200，请与云端创建的数据点对应
           dptype         : 某数据点对应的数据类型
           dp_down_handle : dp_down_handle_t类型函数指针，某数据点对应的处理函数
返回参数 : 无
*****************************************************************************/
typedef struct qlcloud_download_dps
{
    qly_u8 dpid;
    qly_u8 dptype;
    dp_down_handle_t dp_down_handle;
}qlcloud_download_dps_t;
/*****************************************************************************
结构名称 : qlcloud_down_dps数组
功能描述 : 下发数据点结构体数组
*****************************************************************************/
extern qlcloud_download_dps_t qlcloud_down_dps[];
/*****************************************************************************
结构名称 : DOWN_DPS_CNT整数
功能描述 : 下发数据点结构体数组中数据点数量
*****************************************************************************/
extern qly_u32 DOWN_DPS_CNT;
/*****************************************************************************
函数名称 : bytes_to_int
功能描述 : 将4字节数组转换成整型
传入参数 : bytes[4] : 字节数据
传出参数 : 无
返回参数 : 整数值
*****************************************************************************/
qly_s32 bytes_to_int ( const qly_u8 bytes[4] );
/*****************************************************************************
函数名称 : bytes_to_bool
功能描述 : 将4字节数组转换成布尔数值
传入参数 : bytes[1] : 字节数据
传出参数 : 无
返回参数 : 布尔数值
*****************************************************************************/
qly_u8 bytes_to_bool ( const qly_u8 bytes[1] );
/*****************************************************************************
函数名称 : bytes_to_enum
功能描述 : 将1字节数组转换成枚举
传入参数 : bytes[1] : 字节数据
传出参数 : 无
返回参数 : 枚举数值
*****************************************************************************/
qly_u8 bytes_to_enum ( const qly_u8 bytes[1] );
/*****************************************************************************
函数名称 : bytes_to_float
功能描述 : 将4字节数组转换成浮点数
传入参数 : bytes[4] : 字节数据
传出参数 : 无
返回参数 : 浮点数值
*****************************************************************************/
qly_f32 bytes_to_float ( const qly_u8 bytes[4] );


//  第二部分结束  ////////////////////////////////////////////////////////////


/*##########################################################################*/


//  第三部分 [固件升级]  /////////////////////////////////////////////////////

/*****************************************************************************
函数名称 : qlcloud_ota_option_set
功能描述 : 设置ota属性
传入参数 : expect_time : 期望升级倒计时，单位秒，范围120-3600
           chunk_size  : 固件块大小，2的n次幂，范围1024-1048576，默认1024
传出参数 : 无
返回参数 :  0 : 设置成功
           -1 : 设置失败，参数错误
*****************************************************************************/
qly_s32 qlcloud_ota_option_set ( qly_u32 expect_time, qly_u32 chunk_size );
/*****************************************************************************
函数名称 : qlcloud_ota_chunk_cb
功能描述 : 上传数据成功后，sdk自动调用下面这个回调函数
传入参数 : 无
传出参数 : chunk_is_last : 0 : 不是最后一个分块
                           1 : 是最后一个分块，固件传输结束
           chunk_offset  : 本数据块相对于完整固件的偏移量
           chunk_size    : 本数据块的长度
           chunk         : 固件数据块
返回参数 :  0 : 写入固件块成功
           -1 : 写入固件块失败
*****************************************************************************/
qly_s32 qlcloud_ota_chunk_cb ( qly_u8  chunk_is_last,
                               qly_u32 chunk_offset,
                               qly_u32 chunk_size,
                               const qly_s8*  chunk );
/*****************************************************************************
函数名称 : qlcloud_ota_upgrade_cb
功能描述 : 收到此命令，重启，运行新版本固件
传入参数 : 无
传出参数 : 无
返回参数 : 无
*****************************************************************************/
void qlcloud_ota_upgrade_cb ( void );

//  第三部分结束  ////////////////////////////////////////////////////////////


/*##########################################################################*/


//  第四部分 [高级功能]  /////////////////////////////////////////////////////

/*****************************************************************************
函数名称 : qlcloud_tx_data
功能描述 : 透传自定义数据
传入参数 : data     : 自定义数据，仅支持字符型
           data_len : 自定义数据长度
传出参数 : data_seq : 本条数据的序列号
返回参数 :  0 : 成功
           -1 : 失败
*****************************************************************************/
qly_s32 qlcloud_tx_data ( qly_u32* data_seq, const qly_u8* data, qly_u32 data_len );
/*****************************************************************************
函数名称 : qlcloud_tx_data_cb
功能描述 : 透传数据成功后，sdk自动调用下面这个回调函数
传入参数 : 无
传出参数 : data_seq : 某条数据的序列号
返回参数 : 无
*****************************************************************************/
void qlcloud_tx_data_cb ( qly_u32 data_seq );
/*****************************************************************************
函数名称 : qlcloud_tx_data_cb
功能描述 : 透传数据成功后，sdk自动调用下面这个回调函数
传入参数 : 无
传出参数 : data_timestamp : 时间戳，云端收到本条数据的时间点
           data           : 自定义数据，仅支持字符型
           data_len       : 自定义数据长度
返回参数 : 无
*****************************************************************************/
void qlcloud_rx_data_cb ( qly_u32 data_timestamp, qly_u8* data, qly_u32 data_len );

//  第四部分结束  ////////////////////////////////////////////////////////////

qly_s32 qlcloud_wifi_version_set ( const qly_u8 version[6] ); 


#endif /* __QLCLOUD_INTERFACE_H__ */
